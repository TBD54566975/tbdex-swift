import Foundation

/// Protocol defining the behaviors required to generate asymmetric public/private keys
public protocol AsymmetricKeyGenerator {

    /// Generate a random private key in JWK format
    /// - Returns: Private key in JWK format
    static func generatePrivateKey() throws -> Jwk

    /// Compute the associated public key for a given private key
    /// - Parameter privateKey: Private key in JWK format
    /// - Returns: Public key in JWK format which corresponds to the provided `privateKey`
    static func computePublicKey(privateKey: Jwk) throws -> Jwk

    /// Determine if a given private key is a valid key that was generated by this generator
    /// - Parameter privateKey: Private key in JWK format
    /// - Returns: Boolean indicating if the provided `privateKey` is a valid key generated by this generator
    static func isValidPrivateKey(_ privateKey: Jwk) -> Bool

    /// Determine if a given public key is a valid key that was generated by this generator
    /// - Parameter publicKey: Public key in JWK format
    /// - Returns: Boolean indicating if the provided `publicKey` is a valid key generated by this generator
    static func isValidPublicKey(_ publicKey: Jwk) -> Bool
}
