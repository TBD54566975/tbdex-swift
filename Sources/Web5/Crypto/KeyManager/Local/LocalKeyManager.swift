import Foundation

public enum LocalKeyManagerError: Error {
    case unknownCryptoAlgorithm
    case keyNotFound
}

/// Protocol for a backing store which can store keys generated by a `LocalKeyManager`
public protocol LocalKeyStore {
    func getPrivateKey(keyAlias: String) throws -> Jwk?
    func setPrivateKey(_ privateKey: Jwk, keyAlias: String) throws
}

/// A KeyManager that generates and stores cryptographic keys locally on the device
public class LocalKeyManager: KeyManager {

    /// Exhaustive enum of all crypto algorithms supported by a `LocalKeyManager`
    public enum CryptoAlgorithm {
        /// EdDSA using the Ed25519 curve
        case ed25519
        /// ECDSA using the secp256k1 curve and SHA-256
        case es256k
    }

    /// Backing store to store generated keys
    let keyStore: LocalKeyStore

    /// Default initializer
    init(keyStore: LocalKeyStore) {
        self.keyStore = keyStore
    }

    // MARK: - KeyManager

    public func generatePrivateKey(algorithm: CryptoAlgorithm) throws -> String {
        let privateKey: Jwk
        switch algorithm {
        case .ed25519:
            privateKey = try Ed25519.shared.generatePrivateKey()
        case .es256k:
            privateKey = try Secp256k1.shared.generatePrivateKey()
        }

        let keyAlias = try getDeterministicAlias(key: privateKey)
        try self.keyStore.setPrivateKey(privateKey, keyAlias: keyAlias)

        return keyAlias
    }

    public func getPublicKey(keyAlias: String) throws -> Jwk {
        let privateKey = try getPrivateKey(keyAlias: keyAlias)
        let algorithm = try getCryptoAlgorithm(for: privateKey)

        switch algorithm {
        case .ed25519:
            return try Ed25519.shared.computePublicKey(privateKey: privateKey)
        case .es256k:
            return try Secp256k1.shared.computePublicKey(privateKey: privateKey)
        }
    }

    public func sign<D>(keyAlias: String, payload: D) throws -> Data where D: DataProtocol {
        let privateKey = try getPrivateKey(keyAlias: keyAlias)
        let algorithm = try getCryptoAlgorithm(for: privateKey)

        switch algorithm {
        case .ed25519:
            return try Ed25519.shared.sign(privateKey: privateKey, payload: payload)
        case .es256k:
            return try Secp256k1.shared.sign(privateKey: privateKey, payload: payload)
        }
    }

    public func getDeterministicAlias(key: Jwk) throws -> String {
        let alias: String

        if let keyIdentifier = key.keyIdentifier {
            alias = keyIdentifier
        } else {
            alias = try key.thumbprint()
        }

        return alias
    }

    // MARK: - Private

    private func getPrivateKey(keyAlias: String) throws -> Jwk {
        guard let privateKey = try keyStore.getPrivateKey(keyAlias: keyAlias) else {
            throw LocalKeyManagerError.keyNotFound
        }

        return privateKey
    }

    private func getCryptoAlgorithm(for jwk: Jwk) throws -> CryptoAlgorithm {
        let algorithm = jwk.algorithm
        let curve = jwk.curve

        switch (algorithm, curve) {
        case (.eddsa, .ed25519),
            (nil, .ed25519):
            return .ed25519
        case (.es256k, .secp256k1),
            (nil, .secp256k1),
            (.es256k, nil):
            return .es256k
        default:
            throw LocalKeyManagerError.unknownCryptoAlgorithm
        }

    }

}
